create table achievement (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  description text not null,
  category text not null
);

create table bot_users (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  foreign key (user_id) references auth.users(id),
  created_at timestamp with time zone default now() not null
);

create table journey (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  owner_user_id uuid default auth.uid() not null,
  foreign key (owner_user_id) references auth.users(id),
  summaries text,
  essay_titles text,
  chatbot_name text,
  chatbot_image text,
  chatbot_profession text
);

create table inbox (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  is_from_journey bool not null,
  channel_name uuid default gen_random_uuid() not null,
  last_message_id bigint unique,
  owner_journey_id bigint,
  foreign key (owner_journey_id) references public.journey(id),
  user_id uuid,
  foreign key (user_id) references auth.users(id)
);
comment on column inbox.is_from_journey is 'Deprecated, please use owner_journey_id';

create table profiles (
  id bigint generated by default as identity primary key,
  user_id uuid not null unique,
  foreign key (user_id) references auth.users(id),
  username text not null,
  description text not null,
  firstname text not null,
  lastname text not null,
  created_at timestamp with time zone default now() not null,
  profileImageURL text
);

create table school (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null
);

create table inbox_participants (
  inbox_id bigint primary key,
  foreign key (inbox_id) references public.inbox(id),
  created_at timestamp with time zone default now() not null,
  profile_id_1 bigint,
  foreign key (profile_id_1) references public.profiles(id),
  user_id_1 uuid not null,
  foreign key (user_id_1) references auth.users(id),
  profile_id_2 bigint,
  foreign key (profile_id_2) references public.profiles(id),
  user_id_2 uuid not null,
  foreign key (user_id_2) references auth.users(id)
);

create table journey_messages (
  id bigint generated by default as identity primary key,
  journey_id bigint not null,
  foreign key (journey_id) references public.journey(id),
  content text not null,
  is_from_user bool not null,
  created_at timestamp with time zone default now() not null
);

create table messages (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  inbox_id bigint not null,
  foreign key (inbox_id) references public.inbox(id),
  content text not null,
  from_user_id uuid not null,
  foreign key (from_user_id) references auth.users(id)
);

create table school_student (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  school_id bigint,
  foreign key (school_id) references public.school(id),
  user_id uuid not null unique,
  foreign key (user_id) references auth.users(id),
  is_pending bool default true
);

create table school_teacher (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  school_id bigint,
  foreign key (school_id) references public.school(id),
  user_id uuid not null unique,
  foreign key (user_id) references auth.users(id),
  is_pending bool default true
);

create table student_achievement (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  foreign key (user_id) references auth.users(id),
  achievement_id bigint not null,
  foreign key (achievement_id) references public.achievement(id),
  created_at timestamp with time zone default now() not null
);

create table uploaded_writings (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  content text not null,
  generated_language_mark smallint default 0 not null,
  generated_organization_mark smallint default 0 not null,
  generated_content_mark smallint default 0 not null,
  owner_journey_id integer not null,
  foreign key (owner_journey_id) references public.journey(id),
  user_id uuid default auth.uid() not null,
  foreign key (user_id) references auth.users(id)
);
